"use strict"; 
/* В этом файле преставлен код, демонcтрирующий особенности языка Javascript, появивишиеся 
   в новом стандарте EcmaScript 6. Запускается этот код на странице js-begin-ES6.html, 
   а весь вывод результатов своей работы осуществляет в консоль браузера. 
   
    Откройте этот скрипт в Notepad++ чтобы свернуть блоки в удобное меню простой комбинацией клавиш:
	(Alt + 2)          - свернуть 
    (Alt + Shift + 0)  - развернуть.
    
	То же самое можно сделать в Visual Studio Code:
	(Ctrl + K) + (Ctrl + 2) - свернуть, 
    (Ctrl + K) + (Ctrl + J) - развернуть      */
  
                 
{/* ХРАНЕНИЕ И ОБРАБОТКА ДАННЫХ В ОПЕРАТИВНОЙ ПАМЯТИ. */
  console.groupCollapsed("Хранение и обработка данных в оперативной памяти");

  {/* РАБОТА С ПЕРЕМЕННЫМИ LET И CONST   
          https://learn.javascript.ru/variables
    */
  console.groupCollapsed("Переменные"); 

    // Новые правила объявления и использования переменных
        let str1; /* В стандарте ES6 переменные объявляются с помощью ключевого слова let, которое
            пришло на смену ключевому слову var. В целом использование let практически не отличается 
            от var, за исключением нескольких важных отличий: */
        
        /* Область видимости let-переменной ограничивается не только телом функции (как у var), но
           и любыми блоками кода, обрамлёнными фигурными скобками. 
           Кроме того, если в одной области видимости может быть сколько угодно var-объявлений 
           (у них все слова var кроме первого будут проигнорированы), то let-объявление требует 
           полного отсутствия любых других объявленийпеременной с этим же именем в текущем уровне 
           видимости (иначе будет ошибка): */
        
        str1 = "Внешнее значение";
        var globalStr1 = "Глобальное значение";
        {   
            let str1 = "Внутреннее значение"; /* Повторное объявление переменной возможно только 
              внутри дочернего блока или дочерней функции (в этом случае создаётся новая локальная 
              переменная, невидимая за пределами дочернего блока). */
            let str2 = "Новая локальная переменная"; // Эта переменная видна только внутри блока
            var globalStr2 = "Новая глобальная перменная";  // А эта видна для всего скрипта
            console.log(str1); // "Значение в дочернем блоке"
        }         
        console.log(str1); // "Значение в родительском блоке"

        /* При этом в дочерних блоках переменная родительского блока видна и доступна только если 
           в дочернем блоке нигде не объявлена одноимённая локальная переменная */
        { console.log(str1); // "Значение в родительском блоке"
          str1="Новое значение"
        } 
        console.log(str1); // "Новое значение"
        
        /* Использование необъявленной переменной вне области её видимости вызывает ошибку. В данном
           случае ошибки нет, поскольку переменная объявлена позже (тремя строками ниже): */
        console.log(str2); // undefined
        str2 = "Новое значение"; 
        console.log(str2); // "Новое значение"
        var str2; /* Такое объявление переменной уже после её использования работает, но только со
          словом var - благодаря "всплытию" var-объявлений. Для let и const всплытие не работает. */
    
    // Настоящие константы 
    
        /* С помощью ключевого слова const можно объявлять константы. Оно полностью идентично let 
           за исключением того, что попытка изменения значения такой константы выдаст ошибку. */
        const number_PI = 3.14; 
        
  console.groupEnd("Переменные");
  } 

  {/* СТРОКИ В ОБРАТНЫХ КАВЫЧКАХ (ШАБЛОННЫЕ ЛИТЕРАЛЫ)
          https://learn.javascript.ru/string#kavychki
    */
  console.groupCollapsed("Строки в обратных кавычках (шаблонные литералы)");
    
    /* Новый дополнительный формат записи строк использует обратные кавычки вместо обычных.
       Это позовляет помещать в строку многострочный текст, не прибегая к спецсимволам.
       Такой формат задания строки называется шаблонным литералом или шаблонной строкой: */
    let str = `Первая строка
               Вторая строка`;  // Пробелы после переноса строки тоже сохранятся в переменной
    console.log(str);
    
    /* В литерале можно делать подстановки JS-кода. Для этого используется синтаксическая 
       конструкция ${} внутри фигурных скобо помещается код, результат которого преобразуется 
       в строку и автоматически конкатенируется с другими частями литерала */
       str = `Дважды два равно ${2*2}`; // "Дважды два равно 4"
       console.log(str);
    
        // Крайне удобно подставлять в шаблонный литерал имена переменных:
        let x=3, y=4;
        str = `Площадь прямоугольника размером ${x} на ${y} равна ${x*y}`;
        console.log(str); 
        
        // Подстановки можно вкладывать друг в друга
        str = `Выяснилось что ${ 
                    x<y ? `длина ${x} меньше ширины ${y}` 
                        : `всё нормально`
              } !!!`;
        console.log(str);         
        
        
  console.groupEnd("Строки в обратных кавычках (шаблонные литералы)");
  } 

  console.groupEnd("Хранение и обработка данных в оперативной памяти");
}

document.write("<pre>Скрипт js-begin-ES6.js успешно закончил работу!<\/pre>");

