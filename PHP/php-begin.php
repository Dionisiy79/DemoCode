<!DOCTYPE HTML> <html><head><meta charset="utf-8"></head><body>
<!-- Откройте этот файл в Notepad++ чтобы свернуть блоки в удобное меню простой комбинацией клавиш:
	 (Alt + 4) - свернуть и (Alt + Shift + 0)  - развернуть.
	 То же самое можно сделать в Visual Studio Code:
	 (Ctrl + K) + (Ctrl + 2) - свернуть, (Ctrl + K) + (Ctrl + J) - развернуть
	 -->

<div>
<h1>ОСНОВЫ РАБОТЫ С ЯЗЫКОМ ПРОГРАММИРОВАНИЯ PHP</h1>
    
<div> <h2> ОБЩИЕ СИНТАКСИЧЕСКИЕ ПРАВИЛА </h2>
	<p> При классическом использовании PHP-код встраивается фрагментарно в содержимое HTML-файла, 
	     добавляя необходимую функциональность на страницу. В этом документе объясняется только 
		 синтаксис PHP (подразумевая что читатель уже знает синтаксис HTML). </p>
	
	<!-- Фрагменты PHP-кода добавляются в HTML-документ путём заключения этого кода внутри тега:
		 <?php   ?>
	-->
	
	<?php // Однострочный комментарий до конца строки задается двумя слэшами в начале комментария
		  #  Однострочный комментарий в стиле UNIX Задаётся символом # в начале строки
		  /*  Многострочный комментарий - обрамляется парой символов "/" и "*" 
			  В начале комментария символы / и * идут в прямом порядке, а в конце - в обратном.
				https://www.php.net/manual/ru/language.basic-syntax.comments.php
		  */
	?>
		
	<?php  /* Это открывающий тег, который  сообщает интерпретатору, 
				что текст внутри тега является php-кодом, который нужно выполнять.
	
	?>  // Это закрывающий тег. Он не действует внутри многострочного комментария, и наоборот, */
		// срабатывает внутри однострочного комментария, действуя аналогично концу строки:  ?> 
	
	<p>Текст вне php-тегов выводится браузером как обычный html-код.</p>
	
	<p> Рекомендуется не ставить закрывающий тег ?> в самом конце файла, чтобы иметь возможность 
			импортировать внешние скрипты и не иметь проблем с выводом в html-документ 
			невидимых символов	после закрывающего тега ?> </p>
	
	<p> Команды в PHP разделяются символом точки с запятой ";"
		 Cимвол ";" можно не писать перед закрывающим тегом ?> </p>

	<p> Блок операторов выделяется фигурными скобками {}
         Отключить выполнение кода можно поместив его внутрь блока if(0){  } </p>
	
		<?php  // В коде не должно быть ошибок. Для включения нужно 0 заменить на 1 :
			if(0){ echo "Невыполняющийся код"; } 
		?>
	<!-- Если PHP-код перемежается с HTML, то HTML-код в невыполняющемся блоке игнорируется: -->
		<?php if(0){ ?> 
			Этот HTML-текст не будет выведен на страницу. 
		<?php } ?>
		
  </div>
</div>

<div> <h2> КОМАНДЫ ВЗАИМОДЕЙСТВИЯ С ПОЛЬЗОВАТЕЛЕМ </h2>	
	 
  <div>    <h3> ВЫВОД ТЕКСТОВЫХ СТРОК </h3>
  	  <!-- Языковая конструкция echo выводит html-текст в текущее место веб-страницы
		   https://www.php.net/manual/ru/function.echo.php -->
	  <?php echo "Hello World!" ?>
	  <?= "Hello World!" ?>  <!-- Этот сокращённый вызов echo делает то же самое -->
	  <?php 
		echo "<br>HTML <b>работает!!!</b>"; // html-теги при этом обрабатываются
		echo "<br>","А", "Б", "В";          // Строки указанные через запятую - соединяются
		echo "<br> Дважды два ", 2*2;       // При выводе можно использовать выражения.
		echo "<br> Строка 1
		           Строка 2 ";              // Перенос строки тоже выводится.
	    echo("Строка 3");  // Можно вызов сделать как функцию, но на самом деле это не функция
				
		/* Языковая конструкция print выводит html-текст в текущее место веб-страницы,
		   возвращая при этом значение 1
		   https://www.php.net/manual/ru/function.print.php */
		
		print "<br>Вывод строки print";     // Допустимо использовать только один аргумент
		echo print "<br> Вызов print возвращает значение ";  // 1
		print("<br>"); // Можно сделать вызов как функцию, при этом print 
	  ?>
  </div> 
  
  <div>    <h3> ВВОД ДАННЫХ ЧЕРЕЗ GET/POST ЗАПРОСЫ </h3>
	    
	<!-- Самый простой способ ввести данные, которые сможет прочитать php-скрипт - это
	         добавить к URL-строке текст со значением переменной  в формате:
		  ?var1="demotext"  (<имя переменной>=<значение> ) 
	   -->
	<a href="?var1=demotext"> Нажмите эту ссылку для отправки значения переменной через URL </a><br>
	    <?php // Значение можно прочитать в глобальном ассоциативном массиве $_GET
			if (isset($_GET['var1'])) {   // Проверяется существование значения с ключом "var1"
				echo "Через URL передано значение для var1: ";
				echo htmlspecialchars($_GET['var1']); }
		?> <!-- В целях безопасности при выводе переменной применяется функция htmlspecialchars -->
	
	<!-- То же самое можно сделать путём заполнения формы и её отправки GET-запросом -->
		<form action="" method="get">
			Введите значение для var2: <input type="text" name="var2" /><input type="submit" />
		</form>	  
	
	    <?php if (isset($_GET['var2'])) {  
			echo "Через GET-запрос передано значение для var2: ";
			echo htmlspecialchars($_GET['var2']); }   
		?>	 
		
	<!-- Аналогичная передача POST-запросом позволяет оставить URL неизменным  -->
		<form action="" method="post">
			Введите значение для var3: <input type="text" name="var3" /> <input type="submit" />
		</form>	  
	
	    <?php // Для POST запросов используется аналогичный массив $_POST
			if (isset($_POST['var3'])) {
				echo "Через POST-запрос передано значение для var3: ";
				echo htmlspecialchars($_POST['var3']); }  
		?>	 
		
  </div>

  <div>    <h3> ПАУЗА ВЫПОЛНЕНИЯ СКРИПТА </h3>
	  <?php   	  
		sleep(1);       // Пауза в 1 секунду;  Эта функция возвращает 0 при успешном выполнении
		usleep(500000); // Пауза в полсекунды (в микросекундах);  Эта функция ничего не возвращает
		time_nanosleep(0, 500); /* Пауза в 0 секунд и 500 наносекунд. Эта функция возвращает 
                                   TRUE, FALSE или массив в случае прерывания сигналом: 
								   https://www.php.net/manual/ru/function.time-nanosleep.php   */
	  ?>
  </div> 
</div>  

<div> <h2> ХРАНЕНИЕ И ОБРАБОТКА ДАННЫХ В ОПЕРАТИВНОЙ ПАМЯТИ </h2>

  <div>    <h3> РАБОТА С ПЕРЕМЕННЫМИ  </h3>
	<?php   /* https://www.php.net/manual/ru/language.variables.basics.php 
		php-переменные начинаются с символа $, следующей за ней буквой или символом "_" и далее 
		произвольным количеством букв, цифр и символа "_" 
		Длина имени не ограничена. Регистр имеет значение.
		Переменные не требуют специального объявления и создаются во время инициализации: */
		
			$numb1 = 213; // Создана переменная, в которую записано число 213
			$numb1 = 789; // Проинициализированную переменную можно заменить новым значением.
			echo "numb1 == ",$numb1; // Echo выводит на экран значение переменной
			
			$numb1 = "Строка"; /* Тип переменной не фиксирован и в любую переменную могут быть 
								записаны данные любого типа */
			echo "<br>numb1 == ",$numb1;
			// Переменную можно создать как ссылку (псевдоним) на другую переменную:
			$numb1b = &$numb1; // numb1b ссылается на ту же область памяти что и numb1
			
			unset($numb1); /* Удаление переменной
						      https://www.php.net/manual/ru/function.unset.php  */
			echo "<br> Переменная numb1 удалена, а numb1b осталась. Её значение: ", $numb1b;
			
		### ПЕРЕМЕННОЕ ИМЯ ПЕРЕМЕННОЙ ###
		/* Использование символа "$" перед именем переменной в сочетании с интерпретацией скрипта во
		время исполнения позволяет создавать переменные с именем, хранящися в другой переменной.
		Для этого надо перед именем переменной поставить второй символ "$"  */
		
			$var_name = "numb2";
			$$var_name = 456;  // Создана переменная $numb2:
			echo "<br>В переменной ", $var_name, " хранится значение ", $$var_name;
	?>  
	
	<h4> Работа с константами (неизменяемыми переменными) </h4>
	<?php  /* https://www.php.net/manual/ru/language.constants.php
			  Для имён констант используется тот же набор символов, что и для переменных. 
	          При этом не используется символ $ перед именем. 
			  Создать константу можно либо функцией define() либо конструкцией const: */
		
		define("PI", 3.14);  // Имя константы пишут заглавными буквами, но строчными тоже допустимо
		const HI = "Привет"; // Такое объявление не допустимо внутри циклов, условий и функций 
		echo "Константа PI: ", PI, "; Константа HI: ", HI;
		
		/* Если имя константы хранится в переменной, то получить для этого имени значение можно 
		   с помощью функции constant() */
		$const_name = "PI";
		echo "<br>В константе ", $const_name, " хранится значение ", constant($const_name);
		
	?>  
	
	<h4> Простые типы данных </h3>
	<?php // https://www.php.net/manual/ru/language.types.php  
		
		### ЦЕЛЫЕ ЧИСЛА ТИПА INTEGER (количество бит зависит от ОС) ###
		
			$numb1 = 456;  // Десятичное целое число
			$numb1 = 0xF0; // Шестнадцатиричное число начинается с 0x
			$numb1 = 070;  // Восьмиричное число начинается с 0
			$numb1 = 0b11001;  // Двоичное число начинается с 0b
		
		### ВЕЩЕСТВЕННЫЕ ЧИСЛА ТИПА FLOAT И DOUBLE ###
		
			$numb2 = 123.789;  // Для задания вещественного числа используется разделитель - точка
			$numb2 = 3.2e5;    /* = 320000   Запись в научном формате. После символа "e" задаётся 
								сдвиг запятой вправо для десятичного числа */
	
			$numb2 = 3.2e-5;   /* = 0.000032 Отрицательное число сдвигает запятую влево, 
								задавая десятичную дробь */
        
		$numb3 = NAN;  //Спец.значение "Not a Number" используется для обозначения ошибки вычислений
		$numb3 = INF;  //Спец.значение "Infinity"  - бесконечно большое число
		
        $bool1 = true;   // Логический тип "истина"
        $bool1 = false;  // и "ложь"

        $str2 = null;        // Специальный тип означающий "неизвестное значение"
		
		
		### СТРОКИ ###
		
			$str1 = "Тестовая строка";       // Строки задаются двойными или одинарыми кавычками
			// Для использования в строке двойных кавычек можно обрамлять её в одинарные кавычки:
			$str1 = 'Тестовые "кавычки"';    
			$str1 = "Тестовые \"кавычки\"";  // либо использовать экранирующий символ  "\"
			$str1 = " \\ ";  // Для сохранения экранирующего символа его нужно написать дважды 
			$str1 = " \$ ";  // Знак доллара нужно экранировать 
			$str1 = "Первая строка\nВторая строка"; // Перенос строки: \n
			$str1 = "\t \r \b \f"; // Символы  Tab | Return | Backspace | Form feed (новая страница)
			
		### ОБРАБОТКА ИМЁН ПЕРЕМЕННЫХ ВНУТРИ СТРОК ###
		
			/* https://www.php.net/manual/ru/language.types.string.php#language.types.string.parsing
			   Если строка обрамлена двойными (а не одинарными) кавычками,  
		       то переменные в ней обрабатываются (т.е. вместо имён подставляются значения): */
			echo "<br>numb1 == $numb1"; // На экране появится число 789
			
			/* Если после имени переменной идёт допустимый для имён переменных символ, то нужно
			использовать полный синтаксис - заключать переменую в фигурные скобки:  */
			echo "<br>numb1 == {$numb1}_"; 
	?>  

	<h4> Использование переменных </h3>
	<?php   
		// Проверка, инициализирована переменная значением, отличным от NULL :
			if (isset($numb1)) echo "Переменная numb1 инициализирована.";  
									 // https://www.php.net/manual/ru/function.isset.php
		/* Проверка типа переменной. Список возможных значений:
		   boolean,integer,double,string,array,object,resource,NULL,"unknown type" */
			$str1 = gettype($numb2); // https://www.php.net/manual/ru/function.gettype.php
	?>  
  </div>
  
  <div>    <h3> ОПЕРАЦИИ </h3>
	<?php  // https://www.php.net/manual/ru/language.operators.php  	  
	
	    $numb1 = $numb2 = 5;   /* Оператор присваивания тоже возвращает значение, которое можно 
                                  использовать в предыдущем операторе присваивания               */
		echo $numb1 = 7 + 5;   /* или в выводе на экран. Сам оператор правоассоциативный - т.е. 
                                  вычисления последовательности операторов идут справа налево.   */
		$bool1 = $numb2 == 5;  // Оператор == сравнивает два значения и возвращает true или false
		$bool1 = $numb2 === 5; // Оператор === сравнивает два значения b и проверяет равенство типов 
		?>	
	
	<h4> Арифметические операции </h4>
	<?php 
		$numb1 = ( 7+2-3 ) * 4/5;  // Сложение вычитание умножение и деление для любых типов чисел.
     // $numb1 = intdiv(31,8);     // Целочисленное деление (в версиях PHP 7 и выше)
        $numb1 = 31.1 % 8.9;       // == 7     Остаток от деления целочисленных частей чисел
        $numb1 = fmod(4,1.9);      // == 0.2   Остаток от деления вещественных чисел
        $numb1 = pow(2, 3.5);      // Возведение в степень 
        $numb1 = 2 ** 3.5;         // Возведение в степень (в версиях PHP 5.6 и выше)
        $numb1 = 2 ** -2;  // == 0.25 Отрицательная степень (сколько раз разделить единицу на число)      
        // Для вычисления корня можно использовать возведение в дробную степень:
        echo $numb1 = 9 ** (1/2);  // == 3   Корень квадратный из числа 9
		$numb1 = sqrt(9);          // == 3   Функция вычисления квадратного корня
	?>

	<h4> Унарные операции </h4>
	<?php 
        $i = +$numb1;   // Унарный оператор подтверждения знака (приводит другие типы к числу)
        $i = -$numb1;   // Унарный оператор смены знака

        $i++; /* Постфиксный инкремент переменной. Возвращает значение переменной ДО операции 
                 инкремента и увеличивает значение переменной на 1. */
        $i--; /* Постфиксный декремент переменной. Возвращает значение переменной ДО операции 
                 декремента и уменьшает значение переменной на 1. */
        ++$i; /* Префиксный инкремент переменной. Возвращает значение переменной ПОСЛЕ операции 
                 инкремента. Унарный аналог i = i+1. */
        --$i; /* Префиксный декремент переменной. Возвращает значение переменной ПОСЛЕ операции 
                 декремента. Унарный аналог i = i-1. */
		echo $i;
	?>

	<h4> Побитовые операции  </h4>
	<?php /* Побитовые операции производятся с целой частью числа. Дробая часть теряется. 
             Имеют низкий приоритет поэтому часто требуют обрамления скобками. */
        $j = ~$i;       /* Побитовая инверсия - вычитание из -1 (смена знака и декремент). 
                           Инверсия полезна в связке с операцией смены знака: */
        $j = -~$i;      // Инкремент числа. Унарный аналог j = i+1 
        $j = ~-$i;      // Декремент числа. Унарный аналог j = i-1
        echo $i = -~ 2 * 6;  /* Результат равен 2, а не 13, поскольку у унарных операторов 
                               приоритет выше чем у операций умножения и деления."  */

        $i = $i << 5;   /* Побитовый сдвиг влево на указанное число бит с сохранением знака 
                           (умножение на степень двойки ). */
        $i = $i >> 2;   /* Побитовый сдвиг вправо на указанное число бит с сохранением знака 
                           (деление на степень двойки). */
        $i = $i & 5;    // Побитовое И (AND). Используется для установки в нужные биты значения 0.
        $i = $i | 5;    // Побитовое ИЛИ (OR). Используется для установки в нужные биты значения 1.
        $i = $i ^ 2;    /* Побитовое ИСКЛЮЧАЮЩЕЕ ИЛИ (XOR). 
                           Используется для смены значений нужных битов на противоположные. */
	?>

    <h4> Конкатенация строк: через бинарный оператор +  </h4>
    <?php
        echo $str1 = "строка1 " . "строка2"; 
	?>    

    <h4>  Комбинированные операторы присваивания </h4> 
    <?php
        $i += 5; $i -= 5;   // Увеличить или уменьшить переменную на указанное число.
        $i *= 3; $i /= 3;   // Умножить или поделить переменную на указанное число.   
        $i %= 10;           // Записать в переменную остаток от деления её на указанное число; 
        $i <<= 2; $i >>= 2; // Сдвинуть биты переменной влево или вправо на указанное число позиций.
        $i &= 5; $i |= 5; $i ^= 2;   // Поменять значение нужных бит на 0, 1 или противоположное.
		echo $str1 .= " строка3"; // Добавить строку к переменной;
 	?>
	
	<h4> Операторы сравнения и логические операторы </h4> 
    <?php // Во всех нижепреведенных сравнениях результат равен true  
        $b = 2 == '2'   && // Нестрогое равенство (c приведением типов)
             2 != '3'   && //     и нестрогое неравенство
             2 === 2    && // Строгое равенство (без приведения типов)
             2 !== '2'  && //     и строгое неравенство
             $bool1 != !$bool1    && // Отрицание
            (1 >= 1) && (2 > 1)   && // Логическое "И" (конъюнкция)
           ((1 <= 1) || (2 < 1))  && // Логическое "ИЛИ" (дизъюнкция)
           ((1 >= 1) and (2 > 1)) && // Альтернативная конъюнкция (с низким приоритетом)
           ((1 <= 1) xor (2 < 1)) && // Логическое "ИСКЛЮЧАЮЩЕЕ ИЛИ" (ещё ниже приоритет)
           ((1 <= 1) or  (2 < 1)) && // Альтернативная дизъюнкция - самый низкий приоритет
             NAN != NAN           && // NaN не равен ничему - даже самому себе
             null == 0            && // В отличие от JavaScript, где null != 0.
             "Строка 2" > "Строка 1"; // Строки сравниваются побуквенно по кодам символов
        echo "Результат всех сравнений и логических операций: ", $b;
		
		// Приоритет операторов and, xor и or ниже приоритета даже оператора =
			$b = 5 && 0;    // $b == false;  
			$b = 5 and 0;   // Неправильно: $b == 5;
			$b = (5 and 0); // Правильно: $b == false;
   	?>

    <h4> Операции с особыми float-числами INF и NAN </h4>
    <?php 
        // Справедливы следующие соответствия (результат нижеприведенных сравнений == true)
        $b =  1 + INF  ===  INF  &&  
              1 - INF  === -INF  &&
              1 / INF   ==  0    &&  // Деление на бесконечность нестрого равно нулю
              1 / INF  !==  0    && 
             -1 / INF  ==  -0    &&  // минус ноль (бесконечно малое отрицательное число)
                   -0  ===  0    &&  
        "".   0 * INF  === "NAN" &&  // умножение нуля на бесконечность,
        "".  (5 + NAN) === "NAN" &&  // арифметические операции с NaN,
        "". INF / INF  === "NAN" &&  // деление двух бесконечностей,
        "".(INF - INF) === "NAN" &&  // вычитание двух бесконечностей.
           is_nan(NAN)           &&  // Функция is_nan(n) возвращает true если её аргумент NAN
           is_finite(5)          &&  // Функция проверки, что значение - конечное число
           is_infinite(INF) ;        // Функция проверки, что значение - бесконечное число
        echo "Результат проверки всех операций с особыми числами: $b";
	?>
	
    <h4> Особенности арифметического переполнения и искажений хранения </h4>
    <?php 
		// Операция умножения целой части числа на 2 путем сдвига влево вызовет переполнение:
        echo "Переполнение: вместо 20000000000 получаем " . (10000000000 << 1) . "<br>" .
		     "Максимальное целое число которое сохранится без искажений: " .
			 $numb1 = PHP_INT_MAX ; /* 2147483647 - это максимальное целое число которое сохранится 
		     как integer. Цeлочисленные операции, дающие результат превышающий значение PHP_INT_MAX, 
			 меняют тип переменной с integer на double: */
		echo "<br> Тип PHP_INT_MAX : " . gettype($numb1);         // integer
		echo "<br> Тип (PHP_INT_MAX + 1) : " . gettype(++$numb1); // double
	?>
	
  </div> 

  <div>    <h3> ПРИВЕДЕНИЕ ПРОСТЫХ ТИПОВ ПРИ ОПЕРАЦИЯХ </h3>
	<h4> Преобразование в строку </h4>
	<?php   	  
		### Автоматическое строковое преобразование ###
			
			echo $numb1 . " - там где ожидается строка простые типы приводятся к строке.<br>" ; 

		### Явное строковое преобразование ###
			
			$str1 = (string)5; // Конструкция (string) перед выражением приводит любой тип к строке.
			strval($bool1);    // Функция strval() возвращает строковое значение переменной.
			$str1 = "$bool1";  // Использование переменной внутри двойных кавычек приводит к строке.
			$str1 = "" . true . 25 . null; // Конкатенация с пустой строкой.
			
			// Справедливы следующие равенства:
			$b = "". null  === ""      &&
				"". NAN   === "NAN"   &&
				"". true  === "1"     &&
				"". false === "";     
			echo "<br>Результат проверки всех преобразований в строку: $b <br>"; // 1
        
        ### Приведение типа значения к строке ###
		
			// Справедливы следующие равенства:
			$b = "". gettype("")   === "string"  &&
				"". gettype(1)    === "integer" &&
				"". gettype(1.2)  === "double"  &&
				"". gettype(NAN)  === "double"  &&  // "не число" тем не менее имеет тип double
				"". gettype(true) === "boolean" &&
				"". gettype(null) === "NULL";  
			echo "<br>Результат проверки всех приведений типов к строке: $b <br>"; // 1


			### Приведение числа к строке в разных системах счисления. ### 
			// Справедливы следующие равенства:
			$b = (string)(175) === "175"      && // По умолчанию используется десятичная система
				dechex(175) === "af"       && // Представление числа как шестнадцатиричное,
				decbin(175) === "10101111" && // двоичное,
				decoct(175) === "257";        // восьмиричное.
			echo "Результат проверки сравнений для разных систем счисления: $b <br>"; // true
			echo decoct(175);
	?>
	
	<h4> Преобразование в число </h4>
	<?php   
		### Автоматическое численное преобразование 					   ###
        ### Происходит при арифметических операциях и сравнениях с числами ###
			   
			// Если при сложении среди операндов нет строки, то все операнды приводятся к числу:
				echo $i = 1 + null + true ."<br>"; // 2
			// С другими арифметическими операциями все строки всегда приводятся к числу:
				echo $i = '1' / '2' - '3' * '4' % '5' .'<br>';  // -1.5
			/* Строки считываются слева направо, и если встречается нечисленный символ, 
			то возвращается результат преобразования в число считанной части строки. При этом 
			начальные пробелы отбрасываются, а идущие после цифр приводят к остановке разбора
			В отличие от JS, не отбрасываются идущие в начале символы переноса строки. */
				echo $i = '1' - ' 8z5' .'<br>';  // == -7 (В отличие от JS, который выдаст NaN)
			/* Операции сравнения == < <= > >= приводят свои операнды к числу 
			(за исключением если они оба - строки)  */  

		### Явное численное преобразование ###
			
			$i = + '789';       // Унарный плюс приводит любой операнд к числу
			
			// Cправедливы следующие равенства
			$bool1 = + ""    === 0      && // Пустая строка даёт 0
					 + "abc" === 0      && // Строка символов даёт 0
					 + null  === 0      && 
					 + true  === 1      &&
					 + false === 0;         
			echo "Результат проверки всех преобразований в число: $bool1 <br>"; // true
			
			###	Приведение к вещественному числу ###
			// Конструкции (real), (float) и (double) приводят к double
				$i = (real)789; 	echo gettype($i);  // "double"
				$i = (float)789; 	echo gettype($i);  // "double"
				$i = (double)789; echo gettype($i);  // "double"
				
			### Приведение к целому числу ###
				// Конструкции (int) и (integer) приводят выражение к integer, отсекая дробь:
					$i = (int)789.87;     // == 789 
					$i = (integer)789.87; // == 789 
					echo gettype($i);     // "integer"
					
				// Функция intval() также приводит к целому: 
					$i = intval(789.87);  // == 789
				
			### Функции округления, возвращающие тип float ###
					$numb1 = floor(3.2);  // == 3  Округление числа вниз
					$numb1 = ceil(3.2);   // == 4  Округление числа вверх
					$numb1 = round(3.2);  // == 3  Округление до ближайшего целого
					// Вторым аргументом можно задать точность знаков после запятой, :
					round(3.14159,2); // == 3.14 
					// Отрицательная точность задаёт количество знаков ПЕРЕД запятой:
					round(4652,-2);   // == 4700  
				
		### Парсинг числа из строки ###	        
			// Справедливы следующие равенства для конструкций int и float:
        $b = (int)'45px'     ==  45 &&  // На незначимых символах парсинг прекращается   
             (int)' 5px'     ==   5 &&  // Допустимы пробелы вначале 
             (int)'$25'      ==   0 &&  // ==0 если первый значимый символ не цифра или пробел
             (int)' \n 5px'  ==   0 &&  // Перенос строки не считается пробельным символом 
             (int)'87.95 р'  ==  87 &&  // Парсинг целого числа заканчивается на точке 
             (int)'3.2e5'    ==   3 &&  // Научный формат как целое число НЕ распознаётся
             (int)'0x10'     ==   0 &&  // Формат шестнадцатиричного числа НЕ распознаётся
             (int)'010'      ==  10 &&  // Восьмиричное число обрабатывается как десятичное 
             (int)'0b100'    ==   0 &&  // Формат двоичного числа НЕ распознаётся
             (int)""         ==   0 &&  // Если в строке нет цифр, то результат 0
             (float)'5.8px'  == 5.8 &&  // Вещественные числа используют точку для дроби
             (float)'7.9.38' == 7.9 &&  // На второй точке парсинг останавливается
             (float)'3.2e-2' == 0.032;  // Научный формат парсится корректно для вещ.чисел
        echo "<br>Результат проверки всех парсингов чисел: $b"; // 1

		### Парсинг числа из строки для произвольных систем счисления ###	        
				/* Производится функцией intval(), у которой задан второй аргумент, как основание 
				нужной системы счисления. При этом первый аргумент - обязательно строка: */
				  
		    // Справедливы следующие равенства для функции intval():	
		   $b = intval('FF',16)    == 255 &&  // 255 записанное как шестнадцатиричное
				intval('0xFF',16)  == 255 &&  // 255 записанное как шестнадцатиричное
				intval("77",8)     == 63  &&  // 63 записанное как восьмиричное
				intval("077",8)    == 63  &&  // 63 записанное как восьмиричное
				intval("1000",2)   == 8   &&  // 8 записанное как двоичное  	
				// Если основание 0, то система счисления подбирается согласно формату строки:
				intval('0xFF',0)   == 255 &&  // 255 записанное как шестнадцатиричное
				intval("077",0)    == 63  &&  // 63 записанное как восьмиричное
				intval("77",0)     == 77  &&  // 77 десятичное 	
				// при этом формат двоичных чисел начинающихся с 0b вообще не поддерживается:
				intval("0b1000",0) == 0   &&  // 0
				intval("0b1000",2) == 0;      // 0
			echo "<br>Результат проверки всех парсингов недесятичных чисел: $b"; // 1
				
		
        // Проверка, является ли переменная числом:
		if (gettype($numb1) == "integer" || gettype($numb1) == "double")
			echo "<br> numb1 является числом";

		### Автоматическое логическое преобразование ### 
	    
			// Производится там где ожидается логическое значение.
				if ($numb1) $j=5; // Если число numb1 отлично от 0, то выполнится операция j=5
				if ($str1) $j=5;  // Если строка str1 не пустая, то выполнится операция j=5.

			/* Операции && и || используют логический эквивалент операндов и возвращают true/false,
			   а не значение операндов как в JS: */
				$bool1 = $numb1 && $str1;  // В bool1 запишется true или false 
        
			/* В последовательности логических И/ИЛИ находится первое слева значение, 
               которое приводится к false/true. При этом оставшиеся выражения не вычисляются: */
				($n1 = 0) || ($n2 = 5) || ($n3 = 10); /* В n3 ничего не будет записано, так как 
                                                     на операнде (n2 = 5) вычисления прекратятся */

		### Явное логическое преобразование ###        
			$bool1 = (boolean)789; // Конструкция (boolean) приводит любой операнд к логическому    
			$bool1 = !!789;        // Тот же эффект у двух логических НЕ подряд 
			
		    // Справедливы следующие равенства
			$bool1 = ( !! " "  === true  ) &&  // Пробел не является пустой строкой
					 ( !! ""   === false ) && 
					 ( !! 0    === false ) &&  // Все остальные числа  дают true
					 ( !! NAN  === true  ) &&  // В отличие от JS, где !!NAN === false
					 ( !! null === false );    
			echo "<br>Результат проверки преобразований в логическое значение: $bool1"; // 1

	?>
  </div> 

  <div>    <h3> МАТЕМАТИЧЕСКИЕ ФУНКЦИИ И КОНСТАНТЫ </h3>
	<?php 	
	    $numb1 = M_PI;  // Число Пи == 3.141592653589793
		$numb1 = M_E;   // Число e  == 2.718281828459045
		// $numb1 = Math.random();    // Генерация псевдослучайного числа:  0 <= Math.random() < 1. 
		
		$numb1 = abs(-3.14);  // == 3.14  Абсолютное значение числа (модуль числа)
		$numb1 = log(10);     /* Натуральный логарифм числа. 
								 log(x) - степень в которую нужно возвести e чтобы получить x. */
		$numb1 = exp(1);      // Натуральная экпонента. exp(x) == e в степени x.
			echo "<br>Число e: $numb1";
		$numb1 = max(2,-1,7); // Максимальное число из перечисленных аргументов
		$numb1 = min(2,-1,7); // Минимальное число из перечисленных аргументов
		
		// Тригонометрические функции
		$numb1 = sin(3.14/2); // Синус числа (для числа Пи/2 равен 1)
		$numb1 = cos(3.14);   // Косинус числа (для числа Пи равен -1)
		$numb1 = tan(3.14/4); // Тангенс числа (для числа Пи/4 равен 1)
		
		$numb1 = asin(1);     /* Арксинус числа (для числа 1 равен Пи / 2). 
										Аргумент должен быть <= 1 по модулю. Иначе - NAN */
		$numb1 = acos(-1);    /* Аркосинус числа (для числа 0 равен Пи). 
										Аргумент должен быть <= 1 по модулю. Иначе - NAN */
		$numb1 = atan(1);     // Арктангенс числа (для числа 1 равен Пи/4)
		// Арктангенс по координатам точки (y,x) на плоскости:
		$numb1 = atan2(-5,5);  // для угла 315 градусов равен Пи/4
	?>
  </div> 

  <div>    <h3> *** </h3>
	<?php   	  
	?>
  </div> 

  <div>    <h3> *** </h3>
	<?php   	  
	?>
  </div> 
  
  <div>    <h3> *** </h3>
	<?php   	  
	?>
  </div>   
</div>
</body>
</html>

