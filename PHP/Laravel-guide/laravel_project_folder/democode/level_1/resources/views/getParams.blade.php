<!-- Это файл blade-шаблона с демонстрационным кодом.
  Если в файле `config\view.php` прописан путь к папке с этим файлом, то шаблон
  будет доступен под именем `getParams` (см. пояснение в конце этого листинга). 
  Иначе его нужно скопировать в папку шаблонов, чтобы путь к нему был такой: 
     `resources\views\getParams.blade.php`.
  
  Также Вы можете создать новый пустой файл шаблона консольной командой
     `php artisan make:view getParams` 
   и скопировать в него этот код ↓ ↓ ↓
-->

<div>
    <p> Приветсвуем Вас на странице getParamsDemo !!! </p>
    <p> Здесь демонстрируются примеры передачи параметров в генерируемых строках HTTP-запросов. </p>
    
<h2> Передача параметров при генерации URL-адресов </h2>

<h3> Передача классических GET-параметров </h3>
    
    <p> На уровне 0 мы уже научились делать вот такие ссылки на именованные маршруты:
        <a href="{{ route('level1_search') }}"> Ссылка без параметров  </a> 
    </p>
    
    <p> Чтобы с такой ссылкой передать GET-параметр, нужно вторым аргументом в функцию-хелпер `route()` передать массив с именами и значениями нужных параметров: 
        <a href="{{ route('level1_search',
                ['s_string' => 'тарарам', 'lang' => 'fr']) }}">
            Ссылка c GET-параметрами  </a>
    </p>
    
    <p> Добавим интерактивности и создадим форму, которая будет отправлять такой же поисковый запрос, но только уже с данными, которые введёт пользователь: </p>
    
    <form action="{{ route('level1_search') }}" method="GET">
        <label>Строка для поиска: </label>
        <input name="s_string">
        <label>Язык: </label>
        <input name="lang">
        <input type="submit" value="Искать">
    </form>
    
    <p> Теперь в этой форме пользователь сможет задать произвольные значения для GET-параметров и после нажатия кнопки `Искать` браузер перейдёт на страницу поиска, добавив к адресной строке GET-параметры в классическом формате. </p>

<h3> Передача параметров маршрута </h3>
    
    <p> Маршрутам, у которых есть собственные параметры внутри URL, при вызове функции `route()` нужно передавать все эти параметры - их значения будут подставлены в генерируемый URL - каждый на своё место согласно адресному шаблону маршрута:
        <a href="{{ route('level1_cat_page',
                ['cat_name' => 'Новости', 'page_number' => 4]) }}">
            Ссылка c параметрами маршрута </a> <br>
    </p>
    
    <p> Если параметры маршрута объявлены как необязательные, то их можно не передавать:
        <a href="{{ route('level1_showParams',
                ['par1' => 7, 'par2' => 8]) }}">
            Ссылка в которой один необязательный параметр не передан </a> <br>
    </p>    
    
    <p> <em> Примечание: Существует возможность с помощью метода `URL::defaults` включить глобальную подстановку значений по умолчанию для обязательных параметров и таким образом получить возможность не всегда передавать их значения. Этот вопрос будет рассмотрен в следующих уровнях, при изучении темы т.н. посредников маршрутов. </em>
    </p>

    <p> Еcтественно, можно одновременно передавать и параметры маршрута, и дополнительные GET-параметры:
        <a href="{{ route('level1_showAllParams',
                ['par1' => 9, 'par2' => 8,
                 'par4' => 7, 'par5' => 6 ]) }}">
            Ссылка c параметрами маршрута и дополнительными GET-параметрами </a>
    </p>

<h3> Демонстрация особенностей использования косой черты в параметрах маршрута </h3>    

    <p> Любая косая черта вполне хорошо передаётся через GET-параметр: 
        <a href="{{ route('level1_search',
                ['s_string' => 'Косые черты / и \ получены']) }}">
            Рабочая ссылка c косыми чертами в GET-параметре  </a>
    </p>

    <p> А вот в обычном параметре маршрута такое приведёт к ошибке 404 - URL будет не соответствовать маршруту: 
        <a href="{{ route('level1_showParams',
                ['par1' => 'А', 'par2' => 'Б', 'par3' => 'В/Г' ]) }}">
            Не рабочая ссылка c косыми чертами в параметре маршрута </a>
    </p>
    
    <p> Изменение регулярного выражения для маршрута позволило принимать один параметр с символами косой черты: 
        <a href="{{ route('level1_fraction', ['anytext' => '3/4']) }}">
            Рабочая ссылка c числовой дробью в единственном параметре маршрута </a>
    </p>

    <p> Попытка аналогичным образом использовать два параметра приводит к тому, что второй параметр оказывается с пустым значением, а предназначенная для него строка оказывается доавленной к строке первого параметра:
        <a href="{{ route('level1_bad_fractions', ['anytext1' => '2/3', 
                                                   'anytext2' => '3/4']) }}">    
            Ссылка на ошибочный маршрут с числовыми дробями в двух параметрах маршрута </a>
    </p>    
    
    <p> Использование другого символа в качестве разделителя сегментов маршрута позволяет добиться кореектной работы ссылки с косой чертой в обоих параметрах: 
        <a href="{{ route('level1_fractions', ['anytext1' => '2/3', 
                                               'anytext2' => '3\4']) }}">    
            Ссылка на корректный маршрут с чисовыми дробями в обоих параметрах маршрута </a>
    </p>      

</div>
